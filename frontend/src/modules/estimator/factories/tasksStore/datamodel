task {
  uuid auto id

  string text

  estimate estimate

  [tag] tags

  record record

  estimate {
    string text | task.text -> extractEstimate
  }

  tag {
    string text | task.text -> extractTags
  }

  record {
    summary summary
    [component] components

    summary {
      datetime start
      datetime end
      int total
      bool inProgress
    }

    component {
      auto id
      datetime start
      datetime end
      int total
    }
  }

  function extractEstimate(text = '') {
    const matches = text.match(pattern);
    if (matches) {
      const components = mapRegex(pattern.source, ([_, magnitude, unit]) => ({magnitude, unit}), matches),
            total = _.sum(components, inMilliseconds);

      return {
        total,
        components
      };
    }
  }

  function extractTags(text = '') {
    return text.match(/#([\w\d]+)/g);
  }

  // mapRegex(regex, ([p1, p2, p3]) => ({p1, p2, p3}));
  // mapRegex(/(\d) (m)/, ([_, magnitude, unit]) => ({magnitude, unit}), ['5 m']);
  // mapRegex(/(\\d+)\\s*(${units})[^a-zA-Z]?/g, ([_, magnitude, unit]) => ({magnitude, unit}), ['5 m']);

  function mapRegex(regex, fn, list) {
    return list.map(item => fn(item.match(regex)));
  }

  // magic number pyramid :)
  const toMilliseconds = {
    'seconds': s => s * 1000,
    'minutes': m => m * 1000 * 60,
    'hours':   h => h * 1000 * 60 * 60,
    'days':    d => d * 1000 * 60 * 60 * 24,
    'weeks':   w => w * 1000 * 60 * 60 * 24 * 7,
    'months':  m => m * 1000 * 60 * 60 * 24 * (365.25 / 12),
    'year':    y => y * 1000 * 60 * 60 * 24 * 365.25,
    'decade':  d => d * 1000 * 60 * 60 * 24 * 365.25 * 10
  };

  function inMilliseconds(component) {
    const {magnitude, unit} = component;

    return toMilliseconds[unitMap[unit]](magnitude);
  }
}

task {
  id: auto
  text: string
  estimate: estimate
  tags: [tags]
  record: record
}

estimate {
  text: string
}

tag {
  text: string
}

record {
  summary: summary
  components: [component]
}

summary {
  start: datetime
  end: datetime
  total: int
  inProgress: bool
}

component {
  id: auto
  start: datetime
  end: datetime
  total: int
}